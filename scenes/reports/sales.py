from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from user_storage import get_api
from wb_api import get_sales, get_stocks
from utils import paginate, page_info_str, paginated_keyboard
from scenes.calendar import calendar_menu, calendar_callback
from datetime import datetime

REPORT_KEY = "sales"
PAGE_SIZE = 10

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ‚Äî –æ–¥–∏–Ω callback –¥–ª—è –≤—Å–µ—Ö sales_*
async def sales_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = update.callback_query.data

    # 1. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if data == "sales_menu":
        kb = [
            [InlineKeyboardButton("üõí –û—Ç—á—ë—Ç –ø–æ –≤—Å–µ–º —Ç–æ–≤–∞—Ä–∞–º", callback_data="sales_all_menu")],
            [InlineKeyboardButton("üîç –û—Ç—á—ë—Ç –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º", callback_data="sales_articles_menu")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="reports_menu")]
        ]
        await update.callback_query.edit_message_text(
            "<b>–û—Ç—á—ë—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º</b>\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            reply_markup=InlineKeyboardMarkup(kb),
            parse_mode="HTML"
        )
        return

    # 2. –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
    if data == "sales_all_menu":
        kb = [
            [InlineKeyboardButton("üìÖ –ó–∞ –º–µ—Å—è—Ü", callback_data="sales_all_month")],
            [InlineKeyboardButton("üìÜ –ó–∞ –¥–µ–Ω—å", callback_data="sales_all_day")],
            [InlineKeyboardButton("üóì –ó–∞ –ø–µ—Ä–∏–æ–¥", callback_data="sales_all_period_calendar")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="sales_menu")]
        ]
        await update.callback_query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á—ë—Ç–∞ –ø–æ –≤—Å–µ–º —Ç–æ–≤–∞—Ä–∞–º:",
            reply_markup=InlineKeyboardMarkup(kb),
            parse_mode="HTML"
        )
        return

    # 3. –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ ‚Äî –ö–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –¥–Ω—è
    if data == "sales_all_day":
        await calendar_menu(update, context, action_prefix="calendar_sales_day", title="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:")
        return

    # 4. –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ ‚Äî –ö–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    if data == "sales_all_period_calendar":
        await calendar_menu(update, context, action_prefix="calendar_sales_period_start", title="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –ø–µ—Ä–∏–æ–¥–∞:")
        return

    # 5. –ó–∞ –º–µ—Å—è—Ü (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π)
    if data == "sales_all_month":
        date_from = datetime.now().replace(day=1).strftime("%Y-%m-%d")
        await show_sales_all(update, context, date_from)
        return

    # 6. –ê—Ä—Ç–∏–∫—É–ª—ã –º–µ–Ω—é
    if data == "sales_articles_menu":
        kb = [
            [InlineKeyboardButton("üü¢ –ê—Ä—Ç–∏–∫—É–ª—ã —Å –æ—Å—Ç–∞—Ç–∫–æ–º", callback_data="sales_articles_with_stock:0")],
            [InlineKeyboardButton("üìã –í—Å–µ –∞—Ä—Ç–∏–∫—É–ª—ã", callback_data="sales_articles_all:0")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="sales_menu")]
        ]
        await update.callback_query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞—Ä—Ç–∏–∫—É–ª–∞:",
            reply_markup=InlineKeyboardMarkup(kb),
            parse_mode="HTML"
        )
        return

    # 7. –ê—Ä—Ç–∏–∫—É–ª—ã —Å –æ—Å—Ç–∞—Ç–∫–æ–º (—Å—Ç—Ä–∞–Ω–∏—Ü—ã)
    if data.startswith("sales_articles_with_stock"):
        page = int(data.split(":")[1]) if ":" in data else 0
        await show_articles_with_stock(update, context, page)
        return

    # 8. –í—Å–µ –∞—Ä—Ç–∏–∫—É–ª—ã (—Å—Ç—Ä–∞–Ω–∏—Ü—ã)
    if data.startswith("sales_articles_all"):
        page = int(data.split(":")[1]) if ":" in data else 0
        await show_articles_all(update, context, page)
        return

    # 9. –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞
    if data.startswith("sales_article_period:"):
        art = data.split(":", 1)[1]
        kb = [
            [InlineKeyboardButton("üìÖ –ó–∞ –º–µ—Å—è—Ü", callback_data=f"sales_article:{art}:month")],
            [InlineKeyboardButton("üìÜ –ó–∞ –¥–µ–Ω—å", callback_data=f"sales_article:{art}:day")],
            [InlineKeyboardButton("üóì –ó–∞ –ø–µ—Ä–∏–æ–¥", callback_data=f"sales_article_period_calendar:{art}")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="sales_articles_menu")]
        ]
        await update.callback_query.edit_message_text(
            f"<b>–ê—Ä—Ç–∏–∫—É–ª:</b> <code>{art}</code>\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
            reply_markup=InlineKeyboardMarkup(kb),
            parse_mode="HTML"
        )
        return

    # 10. –ö–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞ –∑–∞ –¥–µ–Ω—å
    if data.startswith("sales_article:") and data.endswith(":day"):
        art = data.split(":")[1]
        await calendar_menu(update, context, action_prefix=f"calendar_article_day_{art}", title="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞:")
        return

    # 11. –ö–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥
    if data.startswith("sales_article_period_calendar:"):
        art = data.split(":")[1]
        await calendar_menu(update, context, action_prefix=f"calendar_article_period_start_{art}", title="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –ø–µ—Ä–∏–æ–¥–∞:")
        return

    # 12. –ó–∞ –º–µ—Å—è—Ü –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
    if data.startswith("sales_article:") and data.endswith(":month"):
        art = data.split(":")[1]
        date_from = datetime.now().replace(day=1).strftime("%Y-%m-%d")
        await show_sales_article(update, context, art, date_from)
        return

    # 13. Callback –æ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤)
    if data.startswith("report:sales:"):
        try:
            page = int(data.split(":")[-1])
        except Exception:
            page = 0
        date_from = context.user_data.get("sales_date_from", datetime.now().replace(day=1).strftime("%Y-%m-%d"))
        await show_sales_all(update, context, date_from, page)
        return

    # 14. Callback –æ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–æ–≤)
    if data.startswith("sales_articles_page:"):
        _, page = data.split(":")
        await show_articles_all(update, context, int(page))
        return

    await update.callback_query.answer("–ü—É–Ω–∫—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

# ---- Helpers ----

async def show_sales_all(update, context, date_from, page=0):
    user_id = update.effective_user.id
    api_key = get_api(user_id)
    if not api_key:
        await update.callback_query.edit_message_text(
            "‚ùó –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á—ë—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ API-–∫–ª—é—á.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîë –í–≤–µ—Å—Ç–∏ API", callback_data="api_entry")]]),
            parse_mode="HTML"
        )
        return
    await update.callback_query.edit_message_text("‚è≥ –§–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –æ—Ç—á—ë—Ç...", parse_mode="HTML")
    sales = await get_sales(api_key, date_from)
    stats = {}
    for item in sales:
        art = item.get("supplierArticle", "‚Äî")
        stats.setdefault(art, 0)
        stats[art] += 1
    arts = sorted(stats.items(), key=lambda x: -x[1])
    page_items, total_pages, page = paginate(arts, page, PAGE_SIZE)
    text = f"<b>–ü—Ä–æ–¥–∞–∂–∏</b>\n\n"
    for art, qty in page_items:
        text += f"‚Ä¢ <b>{art}</b>: {qty} —à—Ç\n"
    text += f"\n{page_info_str(page, total_pages)}"
    await update.effective_chat.send_message(
        text,
        reply_markup=paginated_keyboard(REPORT_KEY, page, total_pages),
        parse_mode="HTML"
    )

async def show_articles_with_stock(update, context, page=0):
    user_id = update.effective_user.id
    api_key = get_api(user_id)
    stocks = await get_stocks(api_key)
    arts = sorted(set(i["supplierArticle"] for i in stocks if i.get("quantity", 0) > 0))
    page_items, total_pages, page = paginate(arts, page, PAGE_SIZE)
    text = "<b>–ê—Ä—Ç–∏–∫—É–ª—ã —Å –æ—Å—Ç–∞—Ç–∫–æ–º:</b>\n\n"
    for art in page_items:
        text += f"‚Ä¢ <b>{art}</b>\n"
    text += f"\n{page_info_str(page, total_pages)}"
    kb = []
    if page > 0:
        kb.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"sales_articles_with_stock:{page-1}"))
    if page + 1 < total_pages:
        kb.append(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"sales_articles_with_stock:{page+1}"))
    nav = [kb] if kb else []
    for art in page_items:
        nav.insert(0, [InlineKeyboardButton(f"–ê—Ä—Ç–∏–∫—É–ª: {art}", callback_data=f"sales_article_period:{art}")])
    nav.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="sales_articles_menu")])
    await update.callback_query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(nav),
        parse_mode="HTML"
    )

async def show_articles_all(update, context, page=0):
    user_id = update.effective_user.id
    api_key = get_api(user_id)
    stocks = await get_stocks(api_key)
    arts = sorted(set(i["supplierArticle"] for i in stocks))
    page_items, total_pages, page = paginate(arts, page, PAGE_SIZE)
    text = "<b>–í—Å–µ –∞—Ä—Ç–∏–∫—É–ª—ã:</b>\n\n"
    for art in page_items:
        text += f"‚Ä¢ <b>{art}</b>\n"
    text += f"\n{page_info_str(page, total_pages)}"
    kb = []
    if page > 0:
        kb.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"sales_articles_all:{page-1}"))
    if page + 1 < total_pages:
        kb.append(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"sales_articles_all:{page+1}"))
    nav = [kb] if kb else []
    for art in page_items:
        nav.insert(0, [InlineKeyboardButton(f"–ê—Ä—Ç–∏–∫—É–ª: {art}", callback_data=f"sales_article_period:{art}")])
    nav.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="sales_articles_menu")])
    await update.callback_query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(nav),
        parse_mode="HTML"
    )

async def show_sales_article(update, context, art, date_from, page=0):
    user_id = update.effective_user.id
    api_key = get_api(user_id)
    sales = await get_sales(api_key, date_from)
    filtered = [item for item in sales if item.get("supplierArticle") == art]
    stats = {}
    for item in filtered:
        wh = item.get("warehouseName", "‚Äî")
        stats.setdefault(wh, 0)
        stats[wh] += 1
    text = f"<b>–ü—Ä–æ–¥–∞–∂–∏ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É <code>{art}</code></b>\n\n"
    for wh, qty in stats.items():
        text += f"‚Ä¢ <b>{wh}</b>: {qty} —à—Ç\n"
    text += "\n‚¨ÖÔ∏è <b>–ù–∞–∑–∞–¥</b>: –∫ –≤—ã–±–æ—Ä—É –ø–µ—Ä–∏–æ–¥–∞"
    kb = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"sales_article_period:{art}")]]
    await update.effective_chat.send_message(
        text,
        reply_markup=InlineKeyboardMarkup(kb),
        parse_mode="HTML"
    )

# ---- Calendar Callbacks (—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤ bot.py) ----

async def calendar_sales_day_callback(update, context):
    async def on_date_selected(update, context, selected_date):
        date_from = selected_date.strftime("%Y-%m-%d")
        context.user_data["sales_date_from"] = date_from
        await show_sales_all(update, context, date_from)
    await calendar_callback(update, context, action_prefix="calendar_sales_day", on_date_selected=on_date_selected)

async def calendar_sales_period_start_callback(update, context):
    async def on_date_selected(update, context, selected_date):
        context.user_data["period_start"] = selected_date.strftime("%Y-%m-%d")
        await calendar_menu(update, context, action_prefix="calendar_sales_period_end", title="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –ø–µ—Ä–∏–æ–¥–∞:")
    await calendar_callback(update, context, action_prefix="calendar_sales_period_start", on_date_selected=on_date_selected)

async def calendar_sales_period_end_callback(update, context):
    async def on_date_selected(update, context, selected_date):
        start = context.user_data.get("period_start")
        end = selected_date.strftime("%Y-%m-%d")
        # –ú–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç –ø–æ –ø–µ—Ä–∏–æ–¥—É
        await show_sales_all(update, context, start)  # –ò—Å–ø–æ–ª—å–∑—É–π –ø–µ—Ä–∏–æ–¥ start-end
    await calendar_callback(update, context, action_prefix="calendar_sales_period_end", on_date_selected=on_date_selected)

async def calendar_article_day_callback(update, context):
    data = update.callback_query.data
    prefix = data.split(":")[0]
    art = prefix[len("calendar_article_day_"):]

    async def on_date_selected(update, context, selected_date):
        date_from = selected_date.strftime("%Y-%m-%d")
        await show_sales_article(update, context, art, date_from)

    await calendar_callback(update, context, action_prefix=prefix, on_date_selected=on_date_selected)

async def calendar_article_period_start_callback(update, context):
    data = update.callback_query.data
    prefix = data.split(":")[0]
    art = prefix[len("calendar_article_period_start_"):]

    async def on_date_selected(update, context, selected_date):
        context.user_data["period_start"] = selected_date.strftime("%Y-%m-%d")
        await calendar_menu(update, context, action_prefix=f"calendar_article_period_end_{art}", title="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –ø–µ—Ä–∏–æ–¥–∞:")

    await calendar_callback(update, context, action_prefix=prefix, on_date_selected=on_date_selected)

async def calendar_article_period_end_callback(update, context):
    data = update.callback_query.data
    prefix = data.split(":")[0]
    art = prefix[len("calendar_article_period_end_"):]

    async def on_date_selected(update, context, selected_date):
        start = context.user_data.get("period_start")
        end = selected_date.strftime("%Y-%m-%d")
        # –ú–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç –ø–æ –ø–µ—Ä–∏–æ–¥—É
        await show_sales_article(update, context, art, start)  # –ò—Å–ø–æ–ª—å–∑—É–π –ø–µ—Ä–∏–æ–¥ start-end

    await calendar_callback(update, context, action_prefix=prefix, on_date_selected=on_date_selected)