import asyncio
from telegram import InlineKeyboardMarkup, InlineKeyboardButton, Update
from telegram.ext import ContextTypes
from user_storage import get_api
from wb_api import get_sales  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –≤ wb_api –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è get_sales
from utils import paginate, paginated_keyboard, page_info_str, safe_edit_message_text

REPORT_KEY = "sales"
PAGE_SIZE = 10

# --- –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –æ—Ç—á—ë—Ç–∞ –ø—Ä–æ–¥–∞–∂ ---
def sales_main_keyboard():
    buttons = [
        [InlineKeyboardButton("üì¶ –û—Ç—á—ë—Ç –ø–æ –≤—Å–µ–º —Ç–æ–≤–∞—Ä–∞–º", callback_data="sales_all")],
        [InlineKeyboardButton("üî¢ –û—Ç—á—ë—Ç –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º", callback_data="sales_articles")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="reports_menu")]
    ]
    return InlineKeyboardMarkup(buttons)

# --- –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ ---
def sales_articles_keyboard():
    buttons = [
        [InlineKeyboardButton("–ê—Ä—Ç–∏–∫—É–ª—ã —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º –æ—Å—Ç–∞—Ç–∫–æ–º", callback_data="sales_articles_positive")],
        [InlineKeyboardButton("–í—Å–µ –∞—Ä—Ç–∏–∫—É–ª—ã", callback_data="sales_articles_all")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="sales_main")]
    ]
    return InlineKeyboardMarkup(buttons)

# --- –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –æ—Ç—á—ë—Ç–∞ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ ---
def sales_period_keyboard():
    buttons = [
        [InlineKeyboardButton("–ü–æ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–º—É –º–µ—Å—è—Ü—É", callback_data="sales_period_month")],
        [InlineKeyboardButton("–ü–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –¥–Ω—é", callback_data="sales_period_day")],
        [InlineKeyboardButton("–ó–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥", callback_data="sales_period_custom")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="sales_main")]
    ]
    return InlineKeyboardMarkup(buttons)

# --- –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –Ω–∞–∑–∞–¥ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ ---
def sales_articles_list_keyboard(page, total_pages):
    buttons = []
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"sales_articles_page:{page-1}"))
    if page + 1 < total_pages:
        nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"sales_articles_page:{page+1}"))
    if nav_buttons:
        buttons.append(nav_buttons)
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="sales_articles")])
    return InlineKeyboardMarkup(buttons)

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –¥–ª—è sales ---
async def sales_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    user_id = query.from_user.id
    api_key = get_api(user_id)

    if not api_key:
        await query.answer("‚ùó –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á—ë—Ç–æ–≤ –Ω—É–∂–µ–Ω API-–∫–ª—é—á.")
        return

    # –ì–ª–∞–≤–Ω—ã–π —Ä–∞–∑–¥–µ–ª –æ—Ç—á—ë—Ç–∞ –ø—Ä–æ–¥–∞–∂
    if data == "sales_main" or data == "sales_menu":
        await query.edit_message_text(
            "üìä <b>–û—Ç—á—ë—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º</b>\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á—ë—Ç–∞:",
            reply_markup=sales_main_keyboard(),
            parse_mode="HTML"
        )
        await query.answer()
        return

    # –û—Ç—á—ë—Ç –ø–æ –≤—Å–µ–º —Ç–æ–≤–∞—Ä–∞–º ‚Äî –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
    if data == "sales_all":
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á—ë—Ç–∞ –ø–æ –≤—Å–µ–º —Ç–æ–≤–∞—Ä–∞–º:",
            reply_markup=sales_period_keyboard(),
            parse_mode="HTML"
        )
        await query.answer()
        return

    # –û—Ç—á—ë—Ç –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º ‚Äî –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∞—Ä—Ç–∏–∫—É–ª–∞
    if data == "sales_articles":
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –¥–ª—è –æ—Ç—á—ë—Ç–∞:",
            reply_markup=sales_articles_keyboard(),
            parse_mode="HTML"
        )
        await query.answer()
        return

    # –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –∞—Ä—Ç–∏–∫—É–ª–∞
    if data == "sales_articles_positive":
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∞—Ä—Ç–∏–∫—É–ª—ã —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º –æ—Å—Ç–∞—Ç–∫–æ–º
        items = await get_sales_articles(api_key, positive_only=True)
        await show_articles_list(query, items, 0)
        return

    if data == "sales_articles_all":
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞—Ä—Ç–∏–∫—É–ª—ã
        items = await get_sales_articles(api_key, positive_only=False)
        await show_articles_list(query, items, 0)
        return

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å–ø–∏—Å–∫—É –∞—Ä—Ç–∏–∫—É–ª–æ–≤
    if data.startswith("sales_articles_page:"):
        page = int(data.split(":")[1])
        # –°–æ—Ö—Ä–∞–Ω–∏–º –≤ context.user_data —Å–ø–∏—Å–æ–∫ –∞—Ä—Ç–∏–∫—É–ª–æ–≤, –ª–∏–±–æ –∑–∞–≥—Ä—É–∑–∏–º –∑–∞–Ω–æ–≤–æ
        items = context.user_data.get("sales_articles_items")
        if not items:
            # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
            items = await get_sales_articles(api_key, positive_only=False)
            context.user_data["sales_articles_items"] = items
        await show_articles_list(query, items, page)
        return

    # –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –∞—Ä—Ç–∏–∫—É–ª–∞ ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã –¥–ª—è –Ω–µ–≥–æ
    if data.startswith("sales_article_select:"):
        article = data.split(":",1)[1]
        context.user_data["selected_article"] = article
        await show_date_selection(query, article)
        return

    # –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –æ—Ç—á—ë—Ç–∞ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ (—Ç—É—Ç –Ω—É–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–¥ —Ç–≤–æ–∏ —Ä–µ–∞–ª–∏–∏)
    if data.startswith("sales_period_"):
        period = data.split("_", 1)[1]
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á—ë—Ç–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–µ—Ä–∏–æ–¥—É
        await generate_sales_report_all(query, api_key, period)
        return

    # –í—ã–±–æ—Ä –¥–∞—Ç—ã –¥–ª—è –æ—Ç—á—ë—Ç–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
    if data.startswith("sales_date_select:"):
        date = data.split(":",1)[1]
        article = context.user_data.get("selected_article")
        if not article:
            await query.answer("–û—à–∏–±–∫–∞: –∞—Ä—Ç–∏–∫—É–ª –Ω–µ –≤—ã–±—Ä–∞–Ω")
            return
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á—ë—Ç–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –∏ –¥–∞—Ç–µ
        await generate_sales_report_article(query, api_key, article, date)
        return

    await query.answer("–ü—É–Ω–∫—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")


# --- –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π ---
async def show_articles_list(query, items, page):
    PAGE_SIZE_ARTICLES = 10
    context = query._bot_data or {}  # –ü–æ–ª—É—á–∏–º context.user_data, –Ω–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–µ—Ä—Å–∏–∏ PTB

    if items is None or len(items) == 0:
        await query.edit_message_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤.")
        await query.answer()
        return

    page_items, total_pages, page = paginate(items, page, PAGE_SIZE_ARTICLES)
    buttons = []

    for art in page_items:
        buttons.append([InlineKeyboardButton(art, callback_data=f"sales_article_select:{art}")])

    kb = sales_articles_list_keyboard(page, total_pages)
    # –î–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∞—Ä—Ç–∏–∫—É–ª–∞
    kb.inline_keyboard = buttons + kb.inline_keyboard

    text = f"–°–ø–∏—Å–æ–∫ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page+1} –∏–∑ {total_pages}):"
    await query.edit_message_text(text, reply_markup=kb, parse_mode="HTML")
    await query.answer()

# --- –ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—Ä—Ç–∏–∫—É–ª–æ–≤ (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ API –∏ –ª–æ–≥–∏–∫—É) ---
async def get_sales_articles(api_key, positive_only=False):
    # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ ‚Äî –ø–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ —Å API (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Ç–≤–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫)
    stocks = await get_stocks(api_key)
    articles = set()
    for item in stocks:
        qty = item.get("quantity", 0)
        art = item.get("supplierArticle", "")
        if not art:
            continue
        if positive_only and qty <= 0:
            continue
        articles.add(art)
    # –û—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    return sorted(articles)

# --- –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞ ---
async def show_date_selection(query, article):
    buttons = [
        [InlineKeyboardButton("–ü–æ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–º—É –º–µ—Å—è—Ü—É", callback_data=f"sales_date_select:month")],
        [InlineKeyboardButton("–ü–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –¥–Ω—é", callback_data=f"sales_date_select:day")],
        [InlineKeyboardButton("–ó–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥", callback_data=f"sales_date_select:custom")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="sales_articles")]
    ]
    text = f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞ <b>{article}</b>:"
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(buttons), parse_mode="HTML")
    await query.answer()

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ –ø–æ –≤—Å–µ–º —Ç–æ–≤–∞—Ä–∞–º ---
async def generate_sales_report_all(query, api_key, period):
    # TODO: –†–µ–∞–ª–∏–∑—É–π –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—Å–µ–º —Ç–æ–≤–∞—Ä–∞–º –∏ –ø–µ—Ä–∏–æ–¥–∞–º
    await query.answer(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ –ø–æ –≤—Å–µ–º —Ç–æ–≤–∞—Ä–∞–º –∑–∞ –ø–µ—Ä–∏–æ–¥: {period}")
    await query.edit_message_text(f"–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç—á—ë—Ç –ø–æ –≤—Å–µ–º —Ç–æ–≤–∞—Ä–∞–º –∑–∞ –ø–µ—Ä–∏–æ–¥: <b>{period}</b>", parse_mode="HTML")

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –∏ –¥–∞—Ç–µ ---
async def generate_sales_report_article(query, api_key, article, date):
    # TODO: –†–µ–∞–ª–∏–∑—É–π –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –∏ –¥–∞—Ç–µ
    await query.answer(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É {article} –∑–∞ –ø–µ—Ä–∏–æ–¥: {date}")
    await query.edit_message_text(f"–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç—á—ë—Ç –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É <b>{article}</b> –∑–∞ –ø–µ—Ä–∏–æ–¥: <b>{date}</b>", parse_mode="HTML")
