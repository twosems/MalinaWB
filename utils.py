from telegram import InlineKeyboardMarkup, InlineKeyboardButton
import config
import telegram

def landing_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç", callback_data="start_btn")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", url=config.LANDING_URL)]
    ])

def paginated_keyboard(report_key: str, page: int, total_pages: int, menu_callback: str = "reports_menu"):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –ª—é–±–æ–≥–æ –æ—Ç—á—ë—Ç–∞.
    report_key: –∫–ª—é—á –æ—Ç—á—ë—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä 'remains', 'storage')
    page: —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (int)
    total_pages: –≤—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü (int)
    menu_callback: callback_data –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í –º–µ–Ω—é"
    """
    buttons = []
    nav_buttons = []
    if page > 0:
        nav_buttons.append(
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"report:{report_key}:{page-1}")
        )
    if page < total_pages - 1:
        nav_buttons.append(
            InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"report:{report_key}:{page+1}")
        )
    if nav_buttons:
        buttons.append(nav_buttons)
    buttons.append([InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data=menu_callback)])
    return InlineKeyboardMarkup(buttons)

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–µ –ø–∞–¥–∞–µ—Ç, –µ—Å–ª–∏ "Message is not modified")
async def safe_edit_message_text(message_or_query, *args, **kwargs):
    try:
        # message_or_query –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–∏–±–æ Message, –ª–∏–±–æ CallbackQuery
        if hasattr(message_or_query, "edit_message_text"):
            return await message_or_query.edit_message_text(*args, **kwargs)
        elif hasattr(message_or_query, "message") and hasattr(message_or_query.message, "edit_text"):
            return await message_or_query.message.edit_text(*args, **kwargs)
    except telegram.error.BadRequest as e:
        if "Message is not modified" in str(e):
            pass  # –ü—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        else:
            raise